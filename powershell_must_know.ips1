# 1  Get-Command is an easy-to-use reference cmdlet that brings up all the commands available for use in your current session.
Get-command

# 2 The Get-Help command is essential for anyone using PowerShell, providing quick access to the information you need to run and work with all of the available commands.
Get-help -Name New-AzResourceGroupDeployment

# 3 Microsoft disables scripting by default to prevent malicious scripts from executing in the PowerShell environment. 
# Restricted: This is the default security level which blocks PowerShell scripts from running. In this security level, you can only enter commands interactively.
# Remote Signed: In this security level, any PowerShell scripts that were created locally are permitted to run. Scripts created remotely are permitted to run only if they’ve been signed by a reputable publisher.
Get-ExecutionPolicy
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned

# 4 It’s also helpful to know what services are installed on the system. 
Get-Service
Get-Service | Where-Object {$_.Status -eq "stopped"}
Get-Service | Where-Object {$_.Name -like "app*"}

# 5 If you need to extract data that you can use in a report or send to someone else, the ConvertTo-HTML is one simple way to do so.
ConverTo-HTML

Get-Service | Where-Object {$_.Name -like "app*"}  | ConvertTo-HTML > service.htm

# 6 Get-EventLog -Log "Application"
Get-EventLog

# 7 Much like getting a list of available services, it’s often useful to be able to get a quick list of all the currently running processes. The Get-Process command puts this information at your fingertips.
Get-Process
Stop-Process -processname notepad


# 8 What if you want to clear the entries from your command history? 
Clear-History

# 9 Where-Object
Get-Service | Where-Object {$_.Status -eq 'Running'}

# https://stackify.com/powershell-commands-every-developer-should-know/




# Check multiple servers and port
$test = @('server1:5450','server2:5450','EWEPWDBPIONO01:5450', 'server3:5450')

Write-Output "Check server and port, lazy admin script on:"
$env:computername
Write-Output "with: New-Object System.Net.Sockets.TcpClient(source, port)"

Foreach ($t in $test)
{
  $source = $t.Split(':')[0]
  $port = $t.Split(':')[1]
  
  Write-Host "Connecting to $source on port $port"

  try
  {
    $socket = New-Object System.Net.Sockets.TcpClient($source, $port)
  }
  catch [Exception]
  {
    Write-Host $_.Exception.GetType().FullName
    Write-Host $_.Exception.Message
  }

  Write-Host "Connected`n"
}
